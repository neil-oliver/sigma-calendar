{"ast":null,"code":"var _jsxFileName = \"/Users/neil/Documents/GitHub/sigma-calendar/sigma-calendar/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { client, useConfig, useElementData, useElementColumns, useVariable, useActionTrigger } from '@sigmacomputing/plugin';\nimport { Button } from './components/ui/button';\nimport { Settings as SettingsIcon } from 'lucide-react';\nimport Settings, { DEFAULT_SETTINGS } from './Settings';\nimport { processCalendarData } from './utils/dataProcessor';\nimport CalendarView from './CalendarView';\nimport './App.css';\n\n// Configure the plugin editor panel\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclient.config.configureEditorPanel([{\n  name: 'source',\n  type: 'element'\n}, {\n  name: 'ID',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'ID Column'\n}, {\n  name: 'title',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'Event Title'\n}, {\n  name: 'startDate',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'Start Date'\n}, {\n  name: 'endDate',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'End Date (Optional)'\n}, {\n  name: 'description',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'Description (Optional)'\n}, {\n  name: 'category',\n  type: 'column',\n  source: 'source',\n  allowMultiple: false,\n  label: 'Category/Color (Optional)'\n}, {\n  name: 'eventFields',\n  type: 'column',\n  source: 'source',\n  allowMultiple: true,\n  label: 'Additional Fields'\n}, {\n  name: 'selectedEventID',\n  type: 'variable',\n  label: 'Selected Event ID Variable'\n}, {\n  name: 'selectedDate',\n  type: 'variable',\n  label: 'Selected Date Variable'\n}, {\n  name: 'config',\n  type: 'text',\n  label: 'Settings Config (JSON)',\n  defaultValue: \"{}\"\n}, {\n  name: 'editMode',\n  type: 'toggle',\n  label: 'Edit Mode'\n}, {\n  name: 'onEventClick',\n  type: 'action-trigger',\n  label: 'Event Click Action'\n}]);\nfunction App() {\n  _s();\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const elementColumns = useElementColumns(config.source);\n  const [error, setError] = useState(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n\n  // Get variables and action trigger\n  const [eventIdVariable, setEventIdVariable] = useVariable(config.selectedEventID);\n  const [dateVariable, setDateVariable] = useVariable(config.selectedDate);\n  const triggerEventClick = useActionTrigger(config.onEventClick);\n\n  // Debug: Log element columns structure\n  console.log('Element Columns:', elementColumns);\n\n  // Debug: Log current variable values\n  console.log('Current variables:', {\n    eventIdVariable,\n    dateVariable,\n    hasEventClickTrigger: !!triggerEventClick\n  });\n\n  // Parse config JSON and load settings\n  useEffect(() => {\n    if (config.config && config.config.trim()) {\n      try {\n        const parsedConfig = JSON.parse(config.config);\n        const newSettings = {\n          ...DEFAULT_SETTINGS,\n          ...parsedConfig\n        };\n        setSettings(newSettings);\n      } catch (err) {\n        console.error('Invalid config JSON:', err);\n        setSettings(DEFAULT_SETTINGS);\n      }\n    } else {\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, [config.config]);\n\n  // Process calendar data with column information\n  const calendarData = processCalendarData(sigmaData, config, settings, elementColumns);\n  const handleSettingsSave = newSettings => {\n    setSettings(newSettings);\n    setShowSettings(false);\n  };\n  const handleEventClick = async (eventId, date) => {\n    try {\n      console.log('Event click triggered:', {\n        eventId,\n        date\n      });\n\n      // Set the variables\n      setEventIdVariable(eventId);\n      setDateVariable(date);\n\n      // Trigger the action\n      if (triggerEventClick) {\n        triggerEventClick();\n      }\n      console.log('Variables set and action triggered:', {\n        eventId,\n        date\n      });\n    } catch (error) {\n      console.error('Error handling event click:', error);\n      setError(`Failed to handle event click: ${error.message}`);\n    }\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-background text-foreground flex items-center justify-center p-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center max-w-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-destructive mb-2\",\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted-foreground\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n  if (!config.source || !config.title || !config.startDate) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-background text-foreground flex items-center justify-center p-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center max-w-xl\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-2\",\n          children: \"Calendar Plugin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted-foreground\",\n          children: \"Please configure the data source, event title, and start date columns.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n  if (!sigmaData || !calendarData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen bg-background text-foreground flex items-center justify-center p-10\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold text-muted-foreground\",\n          children: \"Loading calendar data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-background text-foreground relative\",\n    children: [config.editMode && /*#__PURE__*/_jsxDEV(Button, {\n      className: \"absolute top-5 right-5 z-10 gap-2\",\n      onClick: () => setShowSettings(true),\n      size: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(SettingsIcon, {\n        className: \"h-4 w-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), \"Settings\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CalendarView, {\n      data: calendarData,\n      settings: settings,\n      onEventClick: handleEventClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Settings, {\n      isOpen: showSettings,\n      onClose: () => setShowSettings(false),\n      currentSettings: settings,\n      onSave: handleSettingsSave,\n      client: client,\n      elementColumns: elementColumns,\n      config: config\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cZhR7rxbJfwyg2ALR1CjG+eoepo=\", false, function () {\n  return [useConfig, useElementData, useElementColumns, useVariable, useVariable, useActionTrigger];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","client","useConfig","useElementData","useElementColumns","useVariable","useActionTrigger","Button","Settings","SettingsIcon","DEFAULT_SETTINGS","processCalendarData","CalendarView","jsxDEV","_jsxDEV","config","configureEditorPanel","name","type","source","allowMultiple","label","defaultValue","App","_s","sigmaData","elementColumns","error","setError","showSettings","setShowSettings","settings","setSettings","eventIdVariable","setEventIdVariable","selectedEventID","dateVariable","setDateVariable","selectedDate","triggerEventClick","onEventClick","console","log","hasEventClickTrigger","trim","parsedConfig","JSON","parse","newSettings","err","calendarData","handleSettingsSave","handleEventClick","eventId","date","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","startDate","editMode","onClick","size","data","isOpen","onClose","currentSettings","onSave","_c","$RefreshReg$"],"sources":["/Users/neil/Documents/GitHub/sigma-calendar/sigma-calendar/src/App.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { client, useConfig, useElementData, useElementColumns, useVariable, useActionTrigger } from '@sigmacomputing/plugin';\nimport { Button } from './components/ui/button';\nimport { Settings as SettingsIcon } from 'lucide-react';\nimport Settings, { DEFAULT_SETTINGS } from './Settings';\nimport { processCalendarData } from './utils/dataProcessor';\nimport CalendarView from './CalendarView';\nimport './App.css';\n\n// Configure the plugin editor panel\nclient.config.configureEditorPanel([\n  { name: 'source', type: 'element' },\n  { name: 'ID', type: 'column', source: 'source', allowMultiple: false, label: 'ID Column' },\n  { name: 'title', type: 'column', source: 'source', allowMultiple: false, label: 'Event Title' },\n  { name: 'startDate', type: 'column', source: 'source', allowMultiple: false, label: 'Start Date' },\n  { name: 'endDate', type: 'column', source: 'source', allowMultiple: false, label: 'End Date (Optional)' },\n  { name: 'description', type: 'column', source: 'source', allowMultiple: false, label: 'Description (Optional)' },\n  { name: 'category', type: 'column', source: 'source', allowMultiple: false, label: 'Category/Color (Optional)' },\n  { name: 'eventFields', type: 'column', source: 'source', allowMultiple: true, label: 'Additional Fields' },\n  { name: 'selectedEventID', type: 'variable', label: 'Selected Event ID Variable' },\n  { name: 'selectedDate', type: 'variable', label: 'Selected Date Variable' },\n  { name: 'config', type: 'text', label: 'Settings Config (JSON)', defaultValue: \"{}\" },\n  { name: 'editMode', type: 'toggle', label: 'Edit Mode' },\n  { name: 'onEventClick', type: 'action-trigger', label: 'Event Click Action' }\n]);\n\nfunction App() {\n  const config = useConfig();\n  const sigmaData = useElementData(config.source);\n  const elementColumns = useElementColumns(config.source);\n  const [error, setError] = useState(null);\n  const [showSettings, setShowSettings] = useState(false);\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n\n  // Get variables and action trigger\n  const [eventIdVariable, setEventIdVariable] = useVariable(config.selectedEventID);\n  const [dateVariable, setDateVariable] = useVariable(config.selectedDate);\n  const triggerEventClick = useActionTrigger(config.onEventClick);\n\n  // Debug: Log element columns structure\n  console.log('Element Columns:', elementColumns);\n  \n  // Debug: Log current variable values\n  console.log('Current variables:', {\n    eventIdVariable,\n    dateVariable,\n    hasEventClickTrigger: !!triggerEventClick\n  });\n\n  // Parse config JSON and load settings\n  useEffect(() => {\n    if (config.config && config.config.trim()) {\n      try {\n        const parsedConfig = JSON.parse(config.config);\n        const newSettings = { ...DEFAULT_SETTINGS, ...parsedConfig };\n        setSettings(newSettings);\n      } catch (err) {\n        console.error('Invalid config JSON:', err);\n        setSettings(DEFAULT_SETTINGS);\n      }\n    } else {\n      setSettings(DEFAULT_SETTINGS);\n    }\n  }, [config.config]);\n\n  // Process calendar data with column information\n  const calendarData = processCalendarData(sigmaData, config, settings, elementColumns);\n\n  const handleSettingsSave = (newSettings) => {\n    setSettings(newSettings);\n    setShowSettings(false);\n  };\n\n  const handleEventClick = async (eventId, date) => {\n    try {\n      console.log('Event click triggered:', { eventId, date });\n      \n      // Set the variables\n      setEventIdVariable(eventId);\n      setDateVariable(date);\n      \n      // Trigger the action\n      if (triggerEventClick) {\n        triggerEventClick();\n      }\n      \n      console.log('Variables set and action triggered:', {\n        eventId,\n        date\n      });\n    } catch (error) {\n      console.error('Error handling event click:', error);\n      setError(`Failed to handle event click: ${error.message}`);\n    }\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground flex items-center justify-center p-10\">\n        <div className=\"text-center max-w-md\">\n          <h3 className=\"text-lg font-semibold text-destructive mb-2\">Error</h3>\n          <p className=\"text-muted-foreground\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!config.source || !config.title || !config.startDate) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground flex items-center justify-center p-10\">\n        <div className=\"text-center max-w-xl\">\n          <h3 className=\"text-lg font-semibold mb-2\">Calendar Plugin</h3>\n          <p className=\"text-muted-foreground\">Please configure the data source, event title, and start date columns.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!sigmaData || !calendarData) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground flex items-center justify-center p-10\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-semibold text-muted-foreground\">Loading calendar data...</h3>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground relative\">\n      {config.editMode && (\n        <Button \n          className=\"absolute top-5 right-5 z-10 gap-2\"\n          onClick={() => setShowSettings(true)}\n          size=\"sm\"\n        >\n          <SettingsIcon className=\"h-4 w-4\" />\n          Settings\n        </Button>\n      )}\n      \n      <CalendarView \n        data={calendarData}\n        settings={settings}\n        onEventClick={handleEventClick}\n      />\n      \n      <Settings\n        isOpen={showSettings}\n        onClose={() => setShowSettings(false)}\n        currentSettings={settings}\n        onSave={handleSettingsSave}\n        client={client}\n        elementColumns={elementColumns}\n        config={config}\n      />\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}