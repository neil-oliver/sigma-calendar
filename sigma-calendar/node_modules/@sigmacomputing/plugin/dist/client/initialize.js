"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = void 0;
const error_1 = require("../error");
function initialize() {
    const pluginConfig = {
        config: {},
    };
    let subscribedInteractions = {};
    let subscribedWorkbookVars = {};
    const registeredEffects = {};
    const listeners = {};
    for (const [key, value] of new URL(document.location.toString()).searchParams.entries())
        pluginConfig[key] = JSON.parse(value);
    const listener = (e) => {
        emit(e.data.type, e.data.result, e.data.error);
    };
    window.addEventListener('message', listener, false);
    window.addEventListener('click', () => execPromise('wb:plugin:focus'));
    on('wb:plugin:config:update', (config) => {
        var _a;
        Object.assign(pluginConfig, config);
        emit('config', (_a = pluginConfig.config) !== null && _a !== void 0 ? _a : {});
    });
    // send initialize event
    void execPromise('wb:plugin:init', require('../../package.json').version).then(config => {
        Object.assign(pluginConfig, config);
        emit('init', pluginConfig);
        emit('config', pluginConfig.config);
    });
    on('wb:plugin:variable:update', (updatedVariables) => {
        subscribedWorkbookVars = {};
        Object.assign(subscribedWorkbookVars, updatedVariables);
    });
    on('wb:plugin:selection:update', (updatedInteractions) => {
        subscribedInteractions = {};
        Object.assign(subscribedInteractions, updatedInteractions);
    });
    on('wb:plugin:action-effect:invoke', (configId) => {
        const effect = registeredEffects[configId];
        if (!effect) {
            throw new Error(`Unknown action effect with name: ${configId}`);
        }
        effect();
    });
    function on(event, listener) {
        listeners[event] = listeners[event] || [];
        listeners[event].push(listener);
    }
    function off(event, listener) {
        if (listeners[event] == null)
            return;
        listeners[event] = listeners[event].filter(a => a !== listener);
    }
    function emit(event, ...args) {
        Object.values(listeners[event] || []).forEach(fn => fn(...args));
    }
    function execPromise(event, ...args) {
        return new Promise((resolve, reject) => {
            var _a;
            const callback = (data, error) => {
                if (error)
                    reject(error);
                else
                    resolve(data);
                off(event, callback);
            };
            on(event, callback);
            window.parent.postMessage({ type: event, args, elementId: pluginConfig.id }, (_a = pluginConfig === null || pluginConfig === void 0 ? void 0 : pluginConfig.wbOrigin) !== null && _a !== void 0 ? _a : '*');
        });
    }
    return {
        get sigmaEnv() {
            return pluginConfig.sigmaEnv;
        },
        get isScreenshot() {
            return pluginConfig.screenshot;
        },
        config: {
            // @ts-ignore
            getKey(key) {
                var _a;
                return (_a = pluginConfig === null || pluginConfig === void 0 ? void 0 : pluginConfig.config) === null || _a === void 0 ? void 0 : _a[key];
            },
            get() {
                return pluginConfig.config;
            },
            set(partialConfig) {
                void execPromise('wb:plugin:config:update', partialConfig);
            },
            setKey(key, value) {
                void execPromise('wb:plugin:config:update', {
                    [key]: value,
                });
            },
            subscribe(listener) {
                on('config', listener);
                return () => off('config', listener);
            },
            getVariable(configId) {
                (0, error_1.validateConfigId)(configId, 'variable');
                return subscribedWorkbookVars[configId];
            },
            setVariable(configId, ...values) {
                (0, error_1.validateConfigId)(configId, 'variable');
                void execPromise('wb:plugin:variable:set', configId, ...values);
            },
            getInteraction(configId) {
                (0, error_1.validateConfigId)(configId, 'interaction');
                return subscribedInteractions[configId];
            },
            setInteraction(configId, elementId, selection) {
                (0, error_1.validateConfigId)(configId, 'interaction');
                void execPromise('wb:plugin:selection:set', configId, elementId, selection);
            },
            triggerAction(configId) {
                (0, error_1.validateConfigId)(configId, 'action-trigger');
                void execPromise('wb:plugin:action-trigger:invoke', configId);
            },
            registerEffect(configId, effect) {
                (0, error_1.validateConfigId)(configId, 'action-effect');
                registeredEffects[configId] = effect;
                return () => {
                    delete registeredEffects[configId];
                };
            },
            configureEditorPanel(options) {
                void execPromise('wb:plugin:config:inspector', options);
            },
            setLoadingState(loadingState) {
                void execPromise('wb:plugin:config:loading-state', loadingState);
            },
            subscribeToWorkbookVariable(configId, callback) {
                (0, error_1.validateConfigId)(configId, 'variable');
                const setValues = (values) => {
                    callback(values[configId]);
                };
                on('wb:plugin:variable:update', setValues);
                return () => {
                    off('wb:plugin:variable:update', setValues);
                };
            },
            subscribeToWorkbookInteraction(configId, callback) {
                (0, error_1.validateConfigId)(configId, 'interaction');
                const setValues = (values) => {
                    callback(values[configId]);
                };
                on('wb:plugin:selection:update', setValues);
                return () => {
                    off('wb:plugin:selection:update', setValues);
                };
            },
        },
        elements: {
            getElementColumns(configId) {
                (0, error_1.validateConfigId)(configId, 'element');
                return execPromise('wb:plugin:element:columns:get', configId);
            },
            subscribeToElementColumns(configId, callback) {
                (0, error_1.validateConfigId)(configId, 'element');
                const eventName = `wb:plugin:element:${configId}:columns`;
                on(eventName, callback);
                void execPromise('wb:plugin:element:subscribe:columns', configId);
                return () => {
                    off(eventName, callback);
                    void execPromise('wb:plugin:element:unsubscribe:columns', configId);
                };
            },
            subscribeToElementData(configId, callback) {
                (0, error_1.validateConfigId)(configId, 'element');
                const eventName = `wb:plugin:element:${configId}:data`;
                on(eventName, callback);
                void execPromise('wb:plugin:element:subscribe:data', configId);
                return () => {
                    off(eventName, callback);
                    void execPromise('wb:plugin:element:unsubscribe:data', configId);
                };
            },
            fetchMoreElementData(configId) {
                (0, error_1.validateConfigId)(configId, 'element');
                void execPromise('wb:plugin:element:fetch-more', configId);
            },
        },
        destroy() {
            Object.keys(listeners).forEach(event => delete listeners[event]);
            window.removeEventListener('message', listener, false);
        },
    };
}
exports.initialize = initialize;
